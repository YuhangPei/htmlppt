{
  "id": "snapshot_1760929909819_laojboyc8",
  "approvalId": "approval_1760929909816_p3ytnpp5l",
  "approvalTitle": "HTML PPT编辑器设计文档审批",
  "version": 1,
  "timestamp": "2025-10-20T03:11:49.819Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nHTML PPT编辑器是一个基于Vue.js 3 + TypeScript的现代化Web应用程序，采用组件化架构设计。该系统通过模块化的方式实现了项目管理、双模式编辑、实时预览、全屏播放和多平台导出等核心功能。整体架构遵循单一职责原则和依赖注入模式，确保代码的可维护性和可扩展性。\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n由于这是新项目，将建立以下技术标准：\n- **TypeScript严格模式**: 所有代码使用TypeScript并启用严格类型检查\n- **Vue 3 Composition API**: 统一使用Composition API进行组件开发\n- **Pinia状态管理**: 使用Pinia进行全局状态管理\n- **ESLint + Prettier**: 统一代码风格和质量检查\n\n### Project Structure (structure.md)\n项目将采用标准的Vue.js项目结构，按功能模块组织代码：\n- `src/components/`: 按功能分组的Vue组件\n- `src/stores/`: Pinia状态管理模块\n- `src/utils/`: 工具函数和帮助类\n- `src/types/`: TypeScript类型定义\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n- **Vue.js 3 Core**: 利用Vue 3的响应式系统和组件生命周期\n- **Element Plus**: UI组件库，提供统一的界面组件\n- **GrapesJS**: 可视化编辑器，提供拖拽式页面构建功能\n- **Monaco Editor**: 代码编辑器，提供语法高亮和智能补全\n\n### Integration Points\n- **Electron**: 用于桌面应用打包和多平台导出\n- **File System API**: 用于项目文件的读写操作\n- **Browser Storage**: 用于临时数据和用户偏好设置\n\n## Architecture\n\n系统采用分层架构设计，包含表示层、业务逻辑层和数据访问层。使用事件总线模式进行组件间通信，依赖注入模式管理服务依赖。\n\n### Modular Design Principles\n- **Single File Responsibility**: 每个Vue组件文件只负责一个特定功能\n- **Component Isolation**: 创建小而专注的组件，避免大型单体文件\n- **Service Layer Separation**: 分离数据访问、业务逻辑和表示层\n- **Utility Modularity**: 将工具函数分解为专注的单一用途模块\n\n```mermaid\ngraph TD\n    A[App.vue] --> B[Router]\n    B --> C[EditorView]\n    B --> D[PlayerView]\n    B --> E[ProjectView]\n\n    C --> F[PageManager]\n    C --> G[VisualEditor]\n    C --> H[CodeEditor]\n    C --> I[PreviewPane]\n\n    D --> J[PlayerController]\n    D --> K[FloatingButtons]\n    D --> L[DrawingTools]\n\n    E --> M[ProjectList]\n    E --> N[ProjectSettings]\n\n    F --> O[ProjectStore]\n    G --> P[EditorStore]\n    J --> Q[PlayerStore]\n\n    O --> R[FileManager]\n    P --> S[ThemeManager]\n    Q --> T[ExportManager]\n```\n\n## Components and Interfaces\n\n### ProjectManager\n- **Purpose:** 管理PPT项目的创建、打开、保存和页面操作\n- **Interfaces:**\n  - `createProject(name: string): Promise<Project>`\n  - `openProject(path: string): Promise<Project>`\n  - `saveProject(project: Project): Promise<void>`\n  - `addPage(project: Project): Promise<Page>`\n  - `deletePage(project: Project, pageId: string): Promise<void>`\n- **Dependencies:** ProjectStore, FileManager\n- **Reuses:** Vue 3 Composition API, Pinia\n\n### VisualEditor\n- **Purpose:** 提供GrapesJS可视化编辑功能\n- **Interfaces:**\n  - `initEditor(container: HTMLElement, config: EditorConfig): void`\n  - `loadPage(page: Page): void`\n  - `savePage(): Promise<Page>`\n  - `switchTheme(theme: Theme): void`\n- **Dependencies:** GrapesJS, EditorStore\n- **Reuses:** GrapesJS插件系统, Element Plus组件\n\n### CodeEditor\n- **Purpose:** 提供Monaco代码编辑功能\n- **Interfaces:**\n  - `initEditor(container: HTMLElement, language: string): void`\n  - `setValue(code: string): void`\n  - `getValue(): string`\n  - `formatDocument(): void`\n- **Dependencies:** Monaco Editor, EditorStore\n- **Reuses:** Monaco Editor API, TypeScript语言支持\n\n### PlayerController\n- **Purpose:** 控制PPT播放和全屏模式\n- **Interfaces:**\n  - `enterFullscreen(): void`\n  - `exitFullscreen(): void`\n  - `nextPage(): void`\n  - `previousPage(): void`\n  - `toggleDrawingTool(tool: DrawingTool): void`\n- **Dependencies:** PlayerStore, FloatingButtons, DrawingTools\n- **Reuses:** Fullscreen API, Canvas API\n\n### FloatingButtons\n- **Purpose:** 管理全屏模式下的悬浮翻页按钮\n- **Interfaces:**\n  - `show(position: 'left' | 'right'): void`\n  - `hide(): void`\n  - `updateConfig(config: FloatingButtonConfig): void`\n  - `bindEvents(): void`\n- **Dependencies:** PlayerStore\n- **Reuses:** CSS定位, 事件监听\n\n### ExportManager\n- **Purpose:** 处理多平台导出功能\n- **Interfaces:**\n  - `exportToWindows(project: Project): Promise<string>`\n  - `exportToMacOS(project: Project): Promise<string>`\n  - `exportToLinux(project: Project): Promise<string>`\n- **Dependencies:** Electron, FileManager\n- **Reuses:** Electron打包API, 文件系统操作\n\n## Data Models\n\n### Project\n```typescript\ninterface Project {\n  id: string;\n  name: string;\n  description?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  pages: Page[];\n  config: ProjectConfig;\n  theme: Theme;\n  path: string;\n}\n```\n\n### Page\n```typescript\ninterface Page {\n  id: string;\n  name: string;\n  order: number;\n  html: string;\n  css: string;\n  js?: string;\n  thumbnail?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n```\n\n### ProjectConfig\n```typescript\ninterface ProjectConfig {\n  autoSave: boolean;\n  autoSaveInterval: number;\n  defaultTransition: string;\n  showPageNumbers: boolean;\n  loopPresentation: boolean;\n}\n```\n\n### Theme\n```typescript\ninterface Theme {\n  id: string;\n  name: string;\n  colors: {\n    primary: string;\n    secondary: string;\n    background: string;\n    text: string;\n    accent: string;\n  };\n  fonts: {\n    heading: string;\n    body: string;\n    code: string;\n  };\n  spacing: {\n    small: number;\n    medium: number;\n    large: number;\n  };\n}\n```\n\n### FloatingButtonConfig\n```typescript\ninterface FloatingButtonConfig {\n  position: 'left' | 'right';\n  opacity: number;\n  size: 'small' | 'medium' | 'large';\n  autoHide: boolean;\n  showOnHover: boolean;\n}\n```\n\n## Error Handling\n\n### Error Scenarios\n1. **项目文件损坏**\n   - **Handling:** 自动备份恢复，提示用户重新创建\n   - **User Impact:** 显示友好的错误信息，提供恢复选项\n\n2. **编辑器初始化失败**\n   - **Handling:** 降级到代码编辑模式，记录错误日志\n   - **User Impact:** 通知用户编辑器遇到问题，提供替代方案\n\n3. **导出过程失败**\n   - **Handling:** 清理临时文件，提供详细错误信息\n   - **User Impact:** 显示具体的失败原因和解决建议\n\n4. **文件系统权限错误**\n   - **Handling:** 引导用户选择其他目录，使用临时目录\n   - **User Impact:** 解释权限问题，提供操作指引\n\n5. **内存不足**\n   - **Handling:** 自动保存进度，清理缓存，建议关闭其他页面\n   - **User Impact:** 警告内存不足，提供优化建议\n\n## Testing Strategy\n\n### Unit Testing\n- **工具函数测试**: 使用Vitest测试所有utils模块\n- **组件单元测试**: 使用Vue Test Utils测试组件的独立功能\n- **状态管理测试**: 测试Pinia store的actions和getters\n- **类型检查**: 使用TypeScript编译器进行静态类型检查\n\n### Integration Testing\n- **编辑器集成**: 测试VisualEditor和CodeEditor的切换\n- **文件操作**: 测试项目保存和加载的完整流程\n- **播放器功能**: 测试全屏播放和悬浮按钮交互\n- **主题系统**: 测试主题应用和切换功能\n\n### End-to-End Testing\n- **完整工作流**: 从创建项目到导出的完整用户场景\n- **跨浏览器测试**: 在Chrome、Firefox、Safari、Edge上进行测试\n- **性能测试**: 测试大型项目的编辑和播放性能\n- **可访问性测试**: 验证键盘导航和屏幕阅读器支持",
  "fileStats": {
    "size": 7819,
    "lines": 257,
    "lastModified": "2025-10-20T03:11:41.382Z"
  },
  "comments": []
}